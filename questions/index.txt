Q1:   What is typeof operator? 

JavaScript provides a typeof operator that can examine a value and tell you what type it is:

var a;
typeof a;				// "undefined"

a = "hello world";
typeof a;				// "string"

a = 42;
typeof a;				// "number"

a = true;
typeof a;				// "boolean"

a = null;
typeof a;				// "object" -- weird, bug

a = undefined;
typeof a;				// "undefined"

a = { b: "c" };
typeof a;	

Q2:   What is the object type? 

The object type refers to a compound value where you can set properties (named locations) that each hold their own values of any type.
var obj = {
	a: "hello world", // property
	b: 42,
	c: true
};

obj.a;		// "hello world", accessed with doted notation
obj.b;		// 42
obj.c;		// true

obj["a"];	// "hello world", accessed with bracket notation
obj["b"];	// 42
obj["c"];	// true

var obj = {
	a: "hello world",
	b: 42
};

var b = "a";

obj[b];			// "hello world"
obj["b"];		// 42

Q3:   Explain arrays in JavaScript  
Bracket notation is also useful if you want to access a property/key but the name is stored in another variable, such as:

var test=[1,2,3,4,5];

test[0];

test.splice();
test.slice();
test.push();
test.pop();
test.map(); // We need learn about this. Always work with obj;
test.reduce();
test.filter();
test.reverse();


Q4:   What is Scope in JavaScript?  In JavaScript, each function gets its own scope. Scope is basically a collection of variables as well as the rules for how those variables are accessed by name. Only code inside that function can access that function's scoped variables.
A variable name has to be unique within the same scope. A scope can be nested inside another scope. If one scope is nested inside another, code inside the innermost scope can access variables from either scope.

onst a = "hello"
function greet() {
    console.log(a);
}
greet();
console.log(a)

------------------------------------------------------------


let a = "hello";
function greet() {
    a = 3;
    const abc = 10
}
console.log(a);
console.log(abc)
greet();
console.log(a);

Q5:   Explain equality in JavaScript

JavaScript has both strict and typeâ€“converting comparisons:
Strict comparison (e.g., ===) checks for value equality without allowing coercion
Abstract comparison (e.g. ==) checks for value equality with coercion allowed
var a = "42";
var b = 42;

a == b;			// true
a === b;		// false

0 == false ///true

Some simple equalityrules:
If either value (aka side) in a comparison could be the true or false value, avoid == and use ===.
If either value in a comparison could be of these specific values (0, "", or [] -- empty array), avoid == and use ===.
In all other cases, you're safe to use ==. Not only is it safe, but in many cases it simplifies your code in a way that improves readability.