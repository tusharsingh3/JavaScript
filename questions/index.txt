Q1:   What is typeof operator? 

JavaScript provides a typeof operator that can examine a value and tell you what type it is:

var a;
typeof a;				// "undefined"

a = "hello world";
typeof a;				// "string"

a = 42;
typeof a;				// "number"

a = true;
typeof a;				// "boolean"

a = null;
typeof a;				// "object" -- weird, bug

a = undefined;
typeof a;				// "undefined"

a = { b: "c" };
typeof a;	

Q2:   What is the object type? 

The object type refers to a compound value where you can set properties (named locations) that each hold their own values of any type.
var obj = {
	a: "hello world", // property
	b: 42,
	c: true
};

obj.a;		// "hello world", accessed with doted notation
obj.b;		// 42
obj.c;		// true

obj["a"];	// "hello world", accessed with bracket notation
obj["b"];	// 42
obj["c"];	// true

var obj = {
	a: "hello world",
	b: 42
};

var b = "a";

obj[b];			// "hello world"
obj["b"];		// 42

Q3:   Explain arrays in JavaScript  
Bracket notation is also useful if you want to access a property/key but the name is stored in another variable, such as:

var test=[1,2,3,4,5];

test[0];

test.splice();
test.slice();
test.push();
test.pop();
test.map(); // We need learn about this. Always work with obj;
test.reduce();
test.filter();
test.reverse();


Q4:   What is Scope in JavaScript?  In JavaScript, each function gets its own scope. Scope is basically a collection of variables as well as the rules for how those variables are accessed by name. Only code inside that function can access that function's scoped variables.
A variable name has to be unique within the same scope. A scope can be nested inside another scope. If one scope is nested inside another, code inside the innermost scope can access variables from either scope.

onst a = "hello"
function greet() {
    console.log(a);
}
greet();
console.log(a)

------------------------------------------------------------


let a = "hello";
function greet() {
    a = 3;
    const abc = 10
}
console.log(a);
console.log(abc)
greet();
console.log(a);

Q5:   Explain equality in JavaScript

JavaScript has both strict and typeâ€“converting comparisons:
Strict comparison (e.g., ===) checks for value equality without allowing coercion
Abstract comparison (e.g. ==) checks for value equality with coercion allowed
var a = "42";
var b = 42;

a == b;			// true
a === b;		// false

0 == false ///true

Some simple equalityrules:
If either value (aka side) in a comparison could be the true or false value, avoid == and use ===.
If either value in a comparison could be of these specific values (0, "", or [] -- empty array), avoid == and use ===.
In all other cases, you're safe to use ==. Not only is it safe, but in many cases it simplifies your code in a way that improves readability.

Q6:   Explain what is Binary Search? IMPORTANT : Need Study Deep.

Binary search is a search algorithm that is designed to search an element in a sorted array. This binary search is also a well-known example of the "divide and conquer approach"

Nowadays, in the domain of computer science, searching for an element is one of the most frequently used tasks. So due to this frequently used of such things, we have to make it more efficient, for which there are lots of data structures and algorithms exist.

So Binary Search here is also one of the efficient algorithms which are used in searching an element, but a matter of fact here is that the array should be sorted before applying the binary search over it. Binary search is one of the most widely used search algorithms, and it can be used in almost any real-world application.

Binary search works in a divide and conquers way. It divides the array into two halves and performs the searching of the required target value on those halves instead of searching an element on each index, like on index 0 first, then on 1st index, and so on.

Binary Search is a simple, user-friendly, and efficient search algorithm. The only fact is that this algorithm only works with sorted arrays, so we may require to sort our array before performing the binary search on an array.

Now let's understand the implementation of binary search in javascript.

https://www.scaler.com/topics/binary-search-in-javascript


Binary Search is a searching technique which works on the Divide and Conquer approach.
2. It is used to search for any element in a sorted array. 
3. Compared with linear, binary search is much faster with a Time Complexity of O(logN), whereas linear search works in O(N) time complexity.
    1. BASE CONDITION: If starting index is greater than ending index return false.
    2. Compute the middle index.
    3. Compare the middle element with number x. If equal return true.
    4. If greater, call the same function with ending index = middle-1 and repeat step 1.
    5. If smaller, call the same function with starting index = middle+1 and repeat step 1.

    [1, 2, 3, 4, 5, 6, 7, 8, ,9 10]  // 5



Q7. Explain what is Linear (Sequential) Search and when may we use one?

1. A linear search or sequential search is a method for finding an element within a list.
2. It sequentially checks each element of the list until a match is found or the whole list has been searched.
3. check each element with searched key, if founded then returns true otherwise false.



Q 8. Explain Values and Types in JavaScript?  

JavaScript has typed values, not typed variables. The following built-in types are available:
string
number
boolean
null and undefined
object
Symbol

Q9:   What is let keyword in JavaScript?  

let allows you to declare variables that are limited to the scope of a block statement, or expression on which it is used, unlike the var keyword,
 which declares a variable globally, or locally to an entire function regardless of block scope


Q10:   Explain the same-origin policy with regards to JavaScript?

The same-origin policy prevents JavaScript from making requests across domain boundaries.
 An origin is defined as a combination of URI scheme, hostname, and port number. 
 This policy prevents a malicious script on one page from obtaining access to sensitive data on another web page through that page's Document Object Model.